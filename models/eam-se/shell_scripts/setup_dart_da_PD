#!/bin/csh -f
#
# DART software - Copyright UCAR. This open source software is provided
# by UCAR, "as is", without charge, subject to all terms of use at
# http://www.image.ucar.edu/DAReS/DART/DART_download
#
# DART $Id$
#
# This script can be run interactively, but on some systems (e.g. cheyenne)
# it takes longer than is allowed for an interactive job.
# In that case, it can be run as a batch job using the directives below,
# or using "qcmd -q share -l select=1 -- <thisfilename>".
# The job name should be the name of this script(file), 
# or this file may not be archived in $caseroot causing DART_config to fail.
#
# ---------------------
# Purpose
# ---------------------
#
# This script is revised by Shixuan Zhang based on the original script for CESM_2_1
# We do not use this script set up, stage, and build a multi-instance,
# multi-driver, E3SM using an F compset, where CAM-FV, CLM and CICE are active.
# Instead, a separate script is used for that purpose. In that seprate script, we initialize
# and run NINST simulations as our base ensembles for E3SM. The current script is mainly used 
# to modify the environment variable to continuously run the ensemble forcase via hybrid way,i.e
# the model use cam.i and cam.r. to advance the simulation. It also sets up the environment for doing
# a CAM assimilation by setting up and running DART_config. It is intended to be used after you have 
# tested the basic set up of E3SM and DART for your case, using setup_hybrid and DART_config. It also 
# provides more mechanisms for optimizing the assimilation for scientific studies.
#
# Because the atmosphere assimilations typically occur every 6 hours,
# the methodology here reflects that. All of E3SM stops every 6 hours
# so that a CAM output file will be available for assimilation.
#
# ${caseroot}/DART_config is automatically run by this script and will
# augment the E3SM case with the required setup and configuration to use DART
# to perform an assimilation.
#
# ---------------------
# How to use this script.
# ---------------------
#
# -- You will have to read and understand the script in its entirety.
#    You will have to modify things outside this script.
#    Instructions for what to change to use the CAM-Chem or WACCM are
#    outlined in the models/cam-fv/model_mod.html documentation.
#
# -- Examine the whole script to identify things to change for your experiments.
#
# -- Edit this script in the $DART/models/cam-fv/shell_scripts directory
#    or copy it and its dependent scripts to somewhere where it will be preserved.
#    It archives itself to the $caseroot directory during its execution.
#
# -- Locate or create the initial ensemble files that E3SM will need.
#    The initial ensemble can come from a single- or multi-instance reference case.
#
# -- DOCN: The compsets required by this script use a single data ocean.
#    This script can use a daily, 1/4 degree resolution, ocean data set,
#    in place of the monthly, 1 or 2 degree set.
#
# -- Run this script. When it is executed, it will create:
#    1) a E3SM 'CASE' ($caseroot) directory, where the model will be built,
#    2) a run directory, where each forecast + assimilation cycle will take place,
#    3) a bld directory for the executables.
#    4) E3SM's short term archiver (st_archive) will use a fourth directory for
#    storage of model output until it can be moved to long term storage (HPSS)
#
#    This script also executes ${caseroot}/DART_config which augments the case
#    with all the pieces necessary to run DART in the first job.
#    Read the instructions in that file too.
#
# -- Confirm the variable values in $caseroot/env_{build,run,batch,...}.xml.
#
# -- (if running DART) Edit the DART input.nml that appears in the ${caseroot}
#    directory to replace default values with your preferred values.
#
# -- Submit the job using ${caseroot}/case.submit -M begin,end
#
# ---------------------
# Important features
# ---------------------
#
# If you want to change something in your case other than the runtime settings,
# it is safest to delete everything and create the case from scratch.
# For the brave, read
#
# https://ncar.github.io/CAM/doc/build/html/users_guide/index.html
# --> https://ncar.github.io/CAM/doc/build/html/users_guide/building-and-running-cam.html
#    --> http://esmci.github.io/cime/users_guide/building-a-case.html
#
#*******************************************************************************

# ==============================================================================
# case options:
#
# case          The value of "case" will be used many ways; directory and file
#               names both locally and on HPSS, and script names; so consider
# num_instances The number of ensemble members.
#
# ==============================================================================
# machines and directories:
#
# mach          Computer name
# cesmdata      Location of some supporting E3SM data files.
# ccsmroot      Location of the E3SM code base.  This version of the script
#               only supports version cesm2_0 or later, which is available from
#               https://github.com/ESCOMP/cesm.
# caseroot      The E3SM $CASEROOT directory, where the E3SM+DART configuration files
#               will be stored and the build commands will be executed.
#               This should probably not be in scratch.
#               This script will delete an existing caseroot with the same name,
#               so this script and other things you want to preserve should be kept elsewhere.
# dartroot      Location of the root of _your_ DART installation.
# cime_output   $cime_root/$CASEROOT is the directory where E3SM's build and run directories will be created.
#               Large amount of space needed, generally on a scratch partition.  
#               E3SM will define the following variables:
#               RUNDIR:      The E3SM run directory.  Needs large amounts of disk.
#                            Default; $CIME_OUTPUT_ROOT/$CASE/run
#               EXEROOT:     The E3SM executable directory.
#                            Default; $CIME_OUTPUT_ROOT/$CASE/bld
#               DOUT_S_ROOT: The E3SM short-term archive directory.
#                            LARGE amount of disk.
#                            Files remain here until you move them or they are purged.
#                            Default; $CIME_OUTPUT_ROOT/archive/$CASE.
#                            DART's preference is to define the archive directory to be;
#                                     $CIME_OUTPUT_ROOT/$CASE/archive
#                            This change of DOUT_S_ROOT may interfere with the ability to clone your case.
# archdir       The E3SM short-term archive directory.
#               Files will remain here until you move them to permanent storage
#               (or are purged).
# baseobsdir    Part of the directory name containing the obs_seq.out files to be used by the
#               assimilation.  Assimilate.csh looks for a directory with the year and month:
#               $baseobsdir/YYYYMM_6H_E3SM.
#               Will be inserted into DART_config and assimilate.csh.
# ==============================================================================

setenv case           PDENS_F20TRC5-CMIP6_ne4_ne4_DT1800
setenv workdir        /compyfs/zhan391/run_eamdart_eamv1
setenv num_instances  40
setenv mach           compy
setenv project        e3sm_da
setenv resolution     ne4_ne4
setenv ccsmtag        E3SM_MAINT1.0
setenv ccsmroot       /compyfs/zhan391/e3sm_dart/code/${ccsmtag}
setenv caseroot       $workdir/cases/${case}
setenv dartroot       /compyfs/zhan391/e3sm_dart/code/DARTSE_E3SM
setenv dart_script    $dartroot/models/EAM-SE/shell_scripts/eam_se
setenv cime_output    /compyfs/zhan391/e3sm_dart
setenv archdir        ${cime_output}/${case}/archive
setenv baseobsdir     /compyfs/zhan391/e3sm_dart/acme_init/Observations/NCEP+ACARS+GPS+AIRS
setenv basephisdir    /compyfs/zhan391/e3sm_dart/phis/cam_ne4
# ==============================================================================
# Initial conditions files:
#
# refcase    The name of the existing reference case that this run will
#            start from.
#
# refyear    The specific date/time-of-day in the reference case that this
# refmon     run will start from.  (Also see 'runtime settings' below for
# refday     start_year, start_mon, start_day and start_tod.)
# reftod
# NOTE:      all the ref* variables must be treated like strings and have
#            the appropriate number of preceeding zeros
#
# stagedir   The directory location of the reference case files.
# ==============================================================================

setenv refcase     ${case}
setenv refyear     2010
setenv refmon      12
setenv refday      01
setenv reftod      21600

# useful combinations of time that we use below
setenv refdate      $refyear-$refmon-$refday
setenv reftimestamp $refyear-$refmon-$refday-$reftod

setenv stagedir    $archdir/rest/${reftimestamp} 
                   #$cime_output/CAM_init_fv$resolution/${reftimestamp}

# ==============================================================================
# runtime settings: This script will find usable files for years 19mumble-2010.
#    Years after that (or before) may require searching $cesmdata for more
#    up-to-date files and adding them to the user_nl_cam_#### in the code below.
#
# start_year           generally this is the same as the reference case date, but it can
# start_month          be different if you want to start this run as if it was a different time.
# start_day
# start_tod
# stop_option          Units for determining the forecast length between assimilations
# stop_n               Number of time units in each forecast
# short_term_archiver  Copies the files from each job step to a 'rest' directory.
# ==============================================================================

setenv start_year    2010
setenv start_month   12
setenv start_day     01
setenv start_tod     21600
setenv stop_option   nhours
setenv stop_n        6
setenv short_term_archiver off

# ==============================================================================
# configure settings:

# Configure needs to know the location of the CIME directory.
# An environment variable is easier to specify than the command line argument.
setenv CIMEROOT     $ccsmroot/cime
setenv num_drivers  ${num_instances}
# ==============================================================================
# standard commands:
#
# Make sure that this script is using standard system commands
# instead of aliases defined by the user.
# If the standard commands are not in the location listed below,
# change the 'set' commands to use them.
# The 'force' (-f) options listed are added to commands where they are used.
# The verbose (-v) argument has been separated from these command definitions
# because these commands may not accept it on some systems.  On those systems
# set VERBOSE = ''
# ==============================================================================

set nonomatch       # suppress "rm" warnings if wildcard does not match anything

set VERBOSE = '-v'
set   MOVE  = '/usr/bin/mv'
set   COPY  = '/usr/bin/cp --preserve=timestamps'
set   LINK  = '/usr/bin/ln -s'
set   LIST  = '/usr/bin/ls'
set REMOVE  = '/usr/bin/rm'

# ==============================================================================
# Configure the case.
# ==============================================================================

cd ${caseroot}

# Save a copy of the original configuration for debug purposes

foreach FILE ( *xml )
   if ( ! -e          ${FILE}.original ) then
      ${COPY} -f ${VERBOSE} ${FILE} ${FILE}.original
   endif
end

# Get a bunch of environment variables.
# If any of these are changed by xmlchange calls in this program,
# then they must be explicitly changed with setenv calls too.
# $COMPSET is the long name which E3SM uses, and is derived from $compset.
# $compset is set by the user and may be an alias/short name.

setenv COMPSET            `./xmlquery COMPSET            --value`
setenv COMP_OCN           `./xmlquery COMP_OCN           --value`
setenv COMP_GLC           `./xmlquery COMP_GLC           --value`
setenv COMP_ROF           `./xmlquery COMP_ROF           --value`
setenv CIMEROOT           `./xmlquery CIMEROOT           --value`
setenv EXEROOT            `./xmlquery EXEROOT            --value`
setenv RUNDIR             `./xmlquery RUNDIR             --value`
setenv CAM_CONFIG_OPTS    `./xmlquery CAM_CONFIG_OPTS    --value`

set    max_tasks_per_node = `./xmlquery    MAX_TASKS_PER_NODE --value`
set max_mpitasks_per_node = `./xmlquery MAX_MPITASKS_PER_NODE --value`

echo "From create_newcase, settings related to TASKS = ..."
./xmlquery --partial TASK

# Extract pieces of the COMPSET for choosing correct setup parameters.
# E.g. "AMIP_CAM5_CLM50%BGC_CICE%PRES_DOCN%DOM_MOSART_CISM1%NOEVOLVE_SWAV"
set comp_list = `echo $COMPSET   | sed -e "s/_/ /g"`
# Debug
echo "compset parts are $comp_list"

# Need to know if we are using WACCM (aka WCCM or WXIE) for several reasons.
# E3SM2; maybe not needed anymore?
# Mostly file management issues.
# WARNING:   Check your $COMPSET to see whether the grep pattern below will detect your WACCM ! !

setenv waccm false
set atm = `echo $comp_list[2] | sed -e "s#%# #"`
if ($#atm > 1) then
   echo $atm[2] | grep WC
   if ($status == 0) setenv waccm true
endif

# A hybrid run is initialized like a startup but it allows users to bring together
# combinations of initial/restart files from a previous case (specified by $RUN_REFCASE)
# at a user-chosen, model output date (specified by $RUN_REFDATE).
# The starting date of a hybrid run (specified by $RUN_STARTDATE) can be different
# from $RUN_REFDATE.
# There is a bit more complexity; DART only uses CAM _initial_ files, not _restart_ files,
# so CAM will read initial files - even when CONTINUE_RUN = TRUE - # for cycles 2,... .
# For more description of hybrid mode, see:
# http://esmci.github.io/cime/users_guide/running-a-case.html?highlight=hybrid

echo "After xmlchanges for ROOTPEs ..."

./xmlquery --partial TASK
./xmlquery --partial CIME_OUT
./xmlquery --partial RUNDIR
./xmlquery --partial EXEROOT
./xmlquery --partial DOUT

./xmlchange RUN_TYPE=hybrid
./xmlchange RUN_STARTDATE=${start_year}-${start_month}-${start_day}
./xmlchange START_TOD=$start_tod
./xmlchange RUN_REFCASE=$refcase
./xmlchange RUN_REFDATE=$refdate
./xmlchange RUN_REFTOD=$reftod
./xmlchange GET_REFCASE=FALSE

#./xmlchange CIME_OUTPUT_ROOT=${cime_output}

# Do not change the CALENDAR or the value of CONTINUE_RUN in this script.
# Even if it's a branch from another run, where all restarts, etc. are available,
# it still needs to change case/file names for this new case.

./xmlchange CALENDAR=GREGORIAN
#As we want to continue the run with the same name and directory
./xmlchange CONTINUE_RUN=TRUE

./xmlchange STOP_OPTION=$stop_option
./xmlchange STOP_N=$stop_n

# How many jobs (not cycles per job) to run after the first,
# each of which will do DATA_ASSIMILATION_CYCLES cycles.
# Set to 0 for the setup of the case, and the first cycle because
# env_run.xml and input.nml will/may need to be changed between cycle 1 and 2
# (and you really should confirm that the assimilation worked).

./xmlchange RESUBMIT=0

#./xmlchange PIO_TYPENAME=pnetcdf

if ($short_term_archiver == 'off') then
   ./xmlchange DOUT_S=FALSE
else
   ./xmlchange DOUT_S=TRUE
endif
./xmlchange DOUT_S_ROOT=${archdir}

# ==============================================================================
# Set up and run the DART_config script, which adapts the CAM case to do assimilation.
# ==============================================================================

# Define how often sets of restart files will be archived,
# in order to conserve disk space during a multi-cycle job.
setenv save_every_Mth_day_restart 1

# Fill the DART_config script with information it needs and copy it to caseroot.
# DART_config can be run at some later date if desired, but it must be run
# from a caseroot directory.
if ( -e ${dart_script}/DART_config.template ) then
   sed -e "s#your_dart_path#${dartroot}#" \
       -e "s#your_setup_script_dir#${dart_script}#" \
       -e "s#your_observation_path#${baseobsdir}#" \
       -e "s#your_phis_path#${basephisdir}#" \
       -e "s#days_between_archiving_restarts#${save_every_Mth_day_restart}#" \
       < ${dart_script}/DART_config.template \
       >! DART_config  || exit 20
else
   echo "ERROR: the script to configure for data assimilation is not available."
   echo "       DART_config.template MUST be in $dart_script "
   exit 22
endif
chmod 755 DART_config

./DART_config || exit 80

# ==============================================================================
# Modify namelist templates for each instance.
#
# In a hybrid run with CONTINUE_RUN = FALSE (i.e. just starting up):
#    CAM  has been forced to read initial files - specified by namelist var:ncdata.
#    CICE reads from namelist variable 'ice_ic'.
#    CLM  builds its own 'finidat' value from the REFCASE variables,
#         or the output from the interpolation is assigned to finidat in this namelist.
#
# When CONTINUE_RUN = TRUE, CICE and CLM get restart file names from pointer files.
#
# All of these must later on be staged with these same filenames.
# ==============================================================================

# Decide whether interpolation of the CLM restart file will be done.
# If so, each CLM namelist needs it's own finidat_interp_dest.
# set do_clm_interp = "true" #this is not supported by current compset
 
@ inst = 1
while ($inst <= $num_instances)

   # following the E3SM strategy for 'inst_string'
   set inst_string = `printf _%04d $inst`

   # ===========================================================================
   set fname = "user_nl_cam${inst_string}"
   # ===========================================================================
   # ATM Namelist
   # Only change the name for the cam.i files to the name output by DART to trigger
   # hybrid run, we only need to setup these components as other components will 
   # use rpointer.* file to locate the files for the hybrid run 
   sed -i '/ncdata/d' $fname
   echo " ncdata        = 'cam_initial${inst_string}.nc'" >> ${fname}

   # ===========================================================================
   set fname = "user_nl_clm${inst_string}"
   # ===========================================================================
   # LAND Namelist
   # With a RUN_TYPE=hybrid the finidat is automatically specified
   # using the REFCASE, REFDATE, and REFTOD information. i.e.
   sed -i '/finidat/d' $fname
   echo "finidat = '${refcase}.clm2${inst_string}.r.${reftimestamp}.nc'" >> ${fname}

   # ===========================================================================
   set fname = "user_nl_cice${inst_string}"
   # ===========================================================================
   # CICE Namelist
   sed -i '/ice_ic/d' $fname
   echo "ice_ic = '${refcase}.cice${inst_string}.r.${reftimestamp}.nc'" >> ${fname}

   @ inst ++

end

# ===========================================================================
# set fname = "user_nl_cpl"
# ===========================================================================
# DRV or CPL Namelist
# For some reason, a single user_nl_cpl works even when --multi-driver is used.

./preview_namelists || exit 75

# ==============================================================================
# Stage the restarts now that the run directory exists.
# Create a script to do this since it may be needed to recover or restart.
# Create the script and then run it here.
# ==============================================================================

set init_time = ${reftimestamp}

cat << EndOfText >! stage_e3sm_files
#!/bin/csh -f
# This script can be used to help restart an experiment from any previous step.
# The appropriate files are copied to the RUN directory.
#
# Before running this script:
#  1) be sure CONTINUE_RUN is set correctly in the env_run.xml file in
#     your caseroot directory.
#     CONTINUE_RUN=FALSE => you are starting over at the initial time.
#     CONTINUE_RUN=TRUE  => you are starting from a previous step but not
#                           the very first one.
#  2) be sure 'restart_time' is set to the day and time from which you want to
#     restart, if not the initial time.

set restart_time = $init_time

# ---------------------------------------------------------
# Get the settings for this case from the E3SM environment
# ---------------------------------------------------------
cd ${caseroot}
setenv RUNDIR       \`./xmlquery RUNDIR       --value\`
setenv CONTINUE_RUN \`./xmlquery CONTINUE_RUN --value\`

ls \$RUNDIR/*.i.\${restart_time}.nc
if (\$status == 0) then
   # The restart set exists in the RUNDIR, regardless of the short term archiver.
   setenv DOUT_S FALSE
else
   set hide_loc = \`ls \$RUNDIR:h/Hide*/*_0001.i.\${restart_time}.nc\`
   if (\$status == 0) then
      # The restart set exists in a Hide directory, regardless of the short term archiver.
      setenv DOUT_S FALSE
      mv \$hide_loc:h/* \${RUNDIR}
   else
      setenv DOUT_S       \`./xmlquery DOUT_S       --value\`
      setenv DOUT_S_ROOT  \`./xmlquery DOUT_S_ROOT  --value\`
   endif
endif

# ---------------------------------------------------------

cd \${RUNDIR}

echo 'Copying the required E3SM files to the run directory to rerun a previous step. '
echo 'CONTINUE_RUN from env_run.xml is' \${CONTINUE_RUN}
if ( \${CONTINUE_RUN} =~ TRUE ) then
   echo 'so files for some later step than the initial one will be restaged.'
   echo "Date to reset files to is: \${restart_time}"
else
   echo 'so files for the initial step of this experiment will be restaged.'
   echo "Date to reset files to is: ${init_time}"
endif
echo ''

if ( \${CONTINUE_RUN} =~ TRUE ) then

   #----------------------------------------------------------------------
   # This block copies over a set of restart files from any previous step of
   # the experiment that is NOT the initial step.
   # After running this script resubmit the job to rerun.
   #----------------------------------------------------------------------

   echo "Staging restart files for run date/time: " \${restart_time}

   if (  \${DOUT_S} =~ TRUE ) then

      # The restarts should be in the short term archive 'rest' restart directories.

      set RESTARTDIR = \${DOUT_S_ROOT}/rest/\${restart_time}

      if ( ! -d \${RESTARTDIR} ) then

         echo "restart file directory not found: "
         echo " \${RESTARTDIR}"
         exit 100

      endif

      ${COPY} \${RESTARTDIR}/* . || exit 101

   else

      # The short term archiver is off, which leaves all the restart files
      # in the run directory.  The rpointer files must still be updated to
      # point to the files with the right day/time.

      @ inst=1
      while (\$inst <= $num_instances)

         set inst_string = \`printf _%04d \$inst\`

         echo "${case}.clm2\${inst_string}.r.\${restart_time}.nc" >! rpointer.lnd\${inst_string}
         echo "${case}.cice\${inst_string}.r.\${restart_time}.nc" >! rpointer.ice\${inst_string}
         echo "${case}.cam\${inst_string}.r.\${restart_time}.nc"  >! rpointer.atm\${inst_string}
         if (${COMP_ROF} == 'rtm') then
            echo "${case}.rtm\${inst_string}.r.\${restart_time}.nc"  >! rpointer.rof\${inst_string}
         else if (${COMP_ROF} == 'mosart') then
            echo "${case}.mosart\${inst_string}.r.\${restart_time}.nc"  >! rpointer.rof\${inst_string}
         endif
         if ($num_drivers > 1) then
         #  echo "${case}.cpl\${inst_string}.r.\${restart_time}.nc"     >! rpointer.drv\${inst_string}
            echo "${case}.docn\${inst_string}.r.\${restart_time}.nc"    >! rpointer.ocn\${inst_string}
            echo "${case}.docn\${inst_string}.rs1.\${restart_time}.bin" >> rpointer.ocn\${inst_string}
         endif

         @ inst ++
      end

      # There are no instance numbers in these filenames.
       echo "${case}.cpl.r.\${restart_time}.nc"     >! rpointer.drv
      #if ($num_drivers == 1) then
      #   echo "${case}.cpl.r.\${restart_time}.nc"     >! rpointer.drv
      #   echo "${case}.docn.r.\${restart_time}.nc"    >! rpointer.ocn
      #   echo "${case}.docn.rs1.\${restart_time}.bin" >> rpointer.ocn
      #endif

   endif

   # Relink the CAM initial files back to the hardwired names set in the namelist

   @ inst=1
   while (\$inst <= $num_instances)
      set inst_string = \`printf _%04d \$inst\`
      ${LINK} -f ${case}.cam\${inst_string}.i.\${restart_time}.nc cam_initial\${inst_string}.nc
      @ inst ++
   end

   echo "All files reset to rerun experiment step using (ref)time " \$restart_time

else     # CONTINUE_RUN == FALSE

   #----------------------------------------------------------------------
   # This block links the right files to rerun the initial (very first)
   # step of an experiment.  The names and locations are set during the
   # building of the case; to change them rebuild the case.
   # After running this script resubmit the job to rerun.
   #----------------------------------------------------------------------

   echo ' '

   @ inst=1
   while (\$inst <= $num_instances)

      set inst_string = \`printf _%04d \$inst\`

      echo "Staging initial files for instance \$inst of $num_instances"

      ${LINK} -f ${stagedir}/${refcase}.clm2\${inst_string}.r.${init_time}.nc  .
      ${LINK} -f ${stagedir}/${refcase}.cice\${inst_string}.r.${init_time}.nc  .
      ${LINK} -f ${stagedir}/${refcase}.cam\${inst_string}.i.${init_time}.nc   cam_initial\${inst_string}.nc
      if (${COMP_ROF} == 'rtm') then
         ${LINK} -f ${stagedir}/${refcase}.rtm\${inst_string}.r.${init_time}.nc .
      else if (${COMP_ROF} == 'mosart') then
         ${LINK} -f ${stagedir}/${refcase}.mosart\${inst_string}.r.${init_time}.nc .
      endif

      @ inst ++
   end

   echo "All files set to run the FIRST experiment step using (ref)time" $init_time

endif
exit 0

EndOfText
chmod 0755 stage_e3sm_files

./stage_e3sm_files

# ==============================================================================
# Check some XML settings which should have been set by this script.
# ==============================================================================

echo ' '
echo 'E3SM settings which are of special interest:'
echo ' '
foreach var ( CONTINUE_RUN RESUBMIT RUN_REF RUN_STARTDATE STOP_OPTION \
             STOP_N SSTICE DOUT RUNDIR MPI_RUN_COMMAND AVGHIST ASSIM)
   ./xmlquery --partial $var  | grep -v 'Results in' | grep -v '^$'
end
echo ' '

# ==============================================================================
# What to do next
# ==============================================================================

cat << EndOfText >! E3SM_instructions.txt

-------------------------------------------------------------------------
Time to check the case.

1)  Scan the output from this setup script for errors and warnings:
    ERROR, WARNING, 'No such file' (except for MOSART)
    'File status unknown' can be ignored.
    'ERROR: cice.buildlib failed' can be ignored, unless you've changed the CICE code

2)  cd ${RUNDIR}
    Check the files that were staged; follow the links to confirm the data sources.
    Check the compatibility between them and the namelists and pointer files.

3)  cd ${caseroot}
    Verify the E3SM XML settings, especially in env_batch.xml and env_run.xml.
    ./xmlquery --partial <partial_string_of_interest> 
    is particularly useful.

4)  The default initial configuration is to assimilate.
    Verify the ${caseroot}/input.nml contents.
    Assimilation can be turned off by
    ./xmlchange DATA_ASSIMILATION_SCRIPT=${caseroot}/no_assimilate.csh
    DART can be turned off by
    ./xmlchange DATA_ASSIMILATION=FALSE

5)  Submit the job (and get mail when it starts and stops):
    ./case.submit -M begin,end

6)  After the job has run, check to make sure it worked.

7)  If the first cycle generated an ensemble by perturbing a single state,
    change input.nml as described in the instructions in it,
    to make cycles 2,...,N use the latest ensemble, unperturbed.

8)  To extend the run in $stop_n '$stop_option' steps, use xmlchange to
    change the E3SM runtime variables:

    ./xmlchange DATA_ASSIMILATION_CYCLES= the value you want.
    ./xmlchange CONTINUE_RUN=TRUE
    ./xmlchange RESUBMIT= the number of JOBS to run (each JOB performs DATA_ASSIMILATION_CYCLES cycles)

EndOfText

cat E3SM_instructions.txt
cat DART_instructions.txt

exit 0

# <next few lines under version control, do not edit>
# $URL$
# $Revision$
# $Date$
